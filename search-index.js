var searchIndex = JSON.parse('{\
"bevy_datasize":{"doc":"This is a library for tracking memory usage in Bevy apps.","t":[8,24,8,18,18,3,3,3,3,8,18,12,0,0,12,10,10,0,12,0,11,11,11,11,0,12,12,8,8,8,11,11,10,11,11,11,11,11,10,3,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,24,18,3,3,3,3,18,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["DataSize","DataSize","DataSizeEstimator","IS_DYNAMIC","IS_DYNAMIC","MemoryConfig","MemoryStats","MemoryUsage","MemoryUsagePlugin","RegisterSizedTypes","STATIC_HEAP_SIZE","additional_mesh_vertex_attributes","app_ext","builtins","count","estimate_heap_size","estimate_heap_size","estimator","global","prelude","register_sized_asset","register_sized_component","register_sized_render_asset","register_sized_resource","systems","total_heap_bytes","total_stack_bytes","RegisterSizedTypes","RegisterTypes","RegisterTypesWithEstimator","register_asset_with_estimator","register_component_with_estimator","register_render_asset_with_estimator","register_resource_with_estimator","register_sized_asset","register_sized_component","register_sized_render_asset","register_sized_resource","register_type","DefaultMemoryUsagePlugins","as_any","as_any_mut","borrow","borrow_mut","build","downcast","from","into","into_any","into_any_arc","into_any_rc","render","transform","try_from","try_into","type_id","upcast","vzip","ImageMemoryUsagePlugin","MaterialMemoryUsagePlugin","MeshMemoryUsagePlugin","RenderMemoryUsagePlugin","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","default","default","default","downcast","downcast","downcast","downcast","fmt","fmt","from","from","from","from","from_config","from_config","from_config","from_world","from_world","from_world","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","TransformMemoryUsagePlugin","as_any","as_any_mut","borrow","borrow_mut","build","downcast","from","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","upcast","vzip","DataSizeEstimator","ForwardingEstimator","FromConfig","IS_DYNAMIC","SliceEstimator","ZeroEstimator","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","downcast","downcast","downcast","estimate_heap_size","estimate_heap_size","estimate_heap_size","estimate_heap_size","from","from","from","from_config","from_config","from_config","from_config","from_world","from_world","from_world","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip","DataSize","DataSize","IS_DYNAMIC","MemoryConfig","MemoryStats","MemoryUsage","MemoryUsagePlugin","STATIC_HEAP_SIZE","add","additional_mesh_vertex_attributes","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_dyn_eq","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","clone_type_data","clone_type_data","clone_type_data","count","default","default","default","disabled_at_start","downcast","downcast","downcast","downcast","dyn_eq","dyn_eq","dyn_hash","eq","eq","equivalent","equivalent","estimate_heap_size","fmt","fmt","fmt","fmt","from","from","from","from","from_config","from_config","from_config","from_value","from_value_with_estimator","from_values","from_values_with_estimator","from_world","from_world","from_world","get_hash","get_stats","global","hash","heap_size_of","heap_size_of_with_estimator","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","mul","ne","ne","register_type","stack_size_of","to_owned","to_owned","to_owned","to_string","total_bytes","total_heap_bytes","total_size_of","total_size_of_with_estimator","total_stack_bytes","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","update_stats","update_stats_fast","vzip","vzip","vzip","vzip","update_stats","update_stats_for_asset","update_stats_for_component","update_stats_for_render_asset","update_stats_for_resource"],"q":["bevy_datasize","","","","","","","","","","","","","","","","","","","","","","","","","","","bevy_datasize::app_ext","","","","","","","","","","","","bevy_datasize::builtins","","","","","","","","","","","","","","","","","","","bevy_datasize::builtins::render","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bevy_datasize::builtins::transform","","","","","","","","","","","","","","","","","bevy_datasize::estimator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bevy_datasize::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bevy_datasize::systems","","","",""],"d":["Indicates that a type knows how to approximate its memory …","Automatically derive the <code>DataSize</code> trait for a type.","Indicates that a type can estimate the heap usage of …","If <code>true</code>, the type <code>T</code> has a heap size that can vary at …","If <code>true</code>, the type has a heap size that can vary at …","Configuration for the <code>MemoryUsagePlugin</code>.","Memory usage statistics for a single data type.","Stores memory usage statistics for registered data types.","Adds memory usage tracking to Bevy apps.","<code>App</code> extension methods to register <code>DataSize</code> types for …","The amount of space a value of the type <em>always</em> occupies. …","A list of additional <code>Mesh</code> vertex attributes to track.","Extension traits for <code>App</code>.","Support for Bevy’s built-in types.","The total number of instances of this data type.","Estimates the size of heap memory taken up by the given …","Estimates the size of heap memory taken up by this value.","Heap size estimators.","Whether to track memory usage for all registered types.","","Registers the given <code>Asset</code> type with the <code>MemoryUsagePlugin</code>.","Registers the given <code>Component</code> type with the …","Registers the given <code>Asset</code> type with the <code>MemoryUsagePlugin</code>.","Registers the given <code>Resource</code> type with the …","Systems used by this library.","The estimated total number of bytes used by instances of …","The total number of “stack” bytes used by instances of …","<code>App</code> extension methods to register <code>DataSize</code> types for …","The lowest-level interface for registering types for …","<code>App</code> extension methods to register non-<code>DataSize</code> types for …","Like <code>RegisterSizedTypes::register_sized_asset</code>, but uses the","Like <code>RegisterSizedTypes::register_sized_component</code>, but …","Like <code>RegisterSizedTypes::register_sized_asset</code>, but uses …","Like <code>RegisterSizedTypes::register_sized_resource</code>, but uses …","Registers the given <code>Asset</code> type with the <code>MemoryUsagePlugin</code>.","Registers the given <code>Component</code> type with the …","Registers the given <code>Asset</code> type with the <code>MemoryUsagePlugin</code>.","Registers the given <code>Resource</code> type with the …","Registers a type whose <code>MemoryStats</code> will be updated with …","Adds memory tracking for the components, resources, and …","","","","","","","","","","","","Support for Bevy render resources.","Support for types in <code>bevy::transform</code>.","","","","","","Adds memory tracking for <code>Image</code> assets.","Adds memory tracking for <code>StandardMaterial</code> assets.","Adds memory tracking for <code>Mesh</code> and <code>GpuMesh</code> assets.","Adds memory tracking for the components, resources, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds memory tracking for the components that are part of …","","","","","","","","","","","","","","","","","Indicates that a type can estimate the heap usage of …","A <code>DataSizeEstimator</code> that simply forwards to a type’s …","Creates <code>Self</code> using data from the given <code>MemoryConfig</code>.","If <code>true</code>, the type <code>T</code> has a heap size that can vary at …","A <code>DataSizeEstimator</code> that multiplies a type’s stack size …","A <code>DataSizeEstimator</code> that simply returns <code>0</code>.","","","","","","","","","","","","","","","","","","","Estimates the size of heap memory taken up by the given …","","","","","","","Creates <code>Self</code> using data from the given <code>MemoryConfig</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Indicates that a type knows how to approximate its memory …","Automatically derive the <code>DataSize</code> trait for a type.","If <code>true</code>, the type has a heap size that can vary at …","Configuration for the <code>MemoryUsagePlugin</code>.","Memory usage statistics for a single data type.","Stores memory usage statistics for registered data types.","Adds memory usage tracking to Bevy apps.","The amount of space a value of the type <em>always</em> occupies. …","","A list of additional <code>Mesh</code> vertex attributes to track.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The total number of instances of this data type.","","","","Returns a new <code>MemoryConfig</code> in its default state, except …","","","","","","","","","","","","Estimates the size of heap memory taken up by this value.","","","","","","","","","","","","Returns the computed memory statistics for a single value.","Returns the computed memory statistics for a single value …","Returns the computed memory statistics for a collection of …","Returns the computed memory statistics for a collection of …","","","","","Returns the most recent <code>MemoryStats</code> for the given type.","Whether to track memory usage for all registered types.","","Returns the estimated heap size of the given value.","Returns the estimated heap size of the given value using a …","","","","","","","","","","","","","","","","","","","","Registers the given type with the usage tracker.","Returns the “stack” size of the given value.","","","","","Returns the sum of <code>total_stack_bytes</code> and <code>total_heap_bytes</code> …","The estimated total number of bytes used by instances of …","Returns the estimated total size of the given value.","Returns the estimated total size of the given value using …","The total number of “stack” bytes used by instances of …","","","","","","","","","","","","","","","","","Updates the <code>MemoryStats</code> for the given type.","Like <code>update_stats</code> but operates on a shared reference.","","","","","A helper function to update <code>MemoryStats</code> using a closure.","This system updates the <code>MemoryStats</code> for the given asset …","This system updates the <code>MemoryStats</code> for the given …","This system updates the <code>MemoryStats</code> for the given render …","This system updates the <code>MemoryStats</code> for the given resource …"],"i":[0,0,0,1,2,0,0,0,0,0,2,3,0,0,4,1,2,0,3,0,5,5,5,5,0,4,4,0,0,0,6,6,6,6,5,5,5,5,7,0,8,8,8,8,8,8,8,8,8,8,8,0,0,8,8,8,8,8,0,0,0,0,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,10,11,12,9,10,11,12,10,11,9,10,11,12,10,11,12,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,10,11,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,1,0,0,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,1,14,15,16,14,15,16,17,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,0,0,2,0,0,0,0,2,4,3,18,3,3,19,4,4,18,3,19,4,4,18,3,19,4,18,3,19,4,18,3,19,4,3,19,4,3,19,4,4,3,19,4,3,18,3,19,4,3,4,4,3,4,3,4,2,3,19,4,4,18,3,19,4,3,19,4,4,4,4,4,3,19,4,4,19,3,4,4,4,18,3,19,4,18,3,19,4,18,3,19,4,18,3,19,4,4,3,4,19,4,3,19,4,4,4,4,4,4,4,18,3,19,4,18,3,19,4,18,3,19,4,18,3,19,4,19,19,18,3,19,4,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["plugingroupbuilder",3]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["app",3]]],[[["app",3]]],[[["app",3]]],[[["app",3]]],[[],["imagememoryusageplugin",3]],[[],["materialmemoryusageplugin",3]],[[],["meshmemoryusageplugin",3]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[["world",3]]],[[["world",3]]],[[["world",3]]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["app",3]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["forwardingestimator",3]],[[],["zeroestimator",3]],[[],["sliceestimator",3]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[["world",3]]],[[["world",3]]],[[["world",3]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["dyneq",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["app",3]]],[[],["memoryconfig",3]],[[],["memoryusage",3]],[[],["memorystats",3]],[[]],[[]],[[]],[[],["box",3,[["typedata",8],["global",3]]]],[[],["box",3,[["typedata",8],["global",3]]]],[[],["box",3,[["typedata",8],["global",3]]]],null,[[]],[[],["memoryusage",3]],[[],["memorystats",3]],[[]],[[]],[[]],[[]],[[]],[[["dyneq",8]],["bool",15]],[[["dyneq",8]],["bool",15]],[[["hasher",8]]],[[["memoryconfig",3]],["bool",15]],[[["memorystats",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[["memoryconfig",3]]],[[]],[[]],[[]],[[]],[[["world",3]]],[[["world",3]]],[[["world",3]]],[[],["u64",15]],[[],["option",4,[["memorystats",3]]]],null,[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["usize",15]]],[[["memoryconfig",3]],["bool",15]],[[["memorystats",3]],["bool",15]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["string",3]],[[],["usize",15]],null,[[],["usize",15]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["memorystats",3]]],[[["memorystats",3]]],[[]],[[]],[[]],[[]],[[["memoryconfig",3],["memoryusage",3]]],[[["res",3,[["assets",3]]],["res",3,[["memoryconfig",3]]],["res",3,[["memoryusage",3]]]]],[[["query",3],["res",3,[["memoryconfig",3]]],["res",3,[["memoryusage",3]]]]],[[["res",3,[["renderassets",6]]],["res",3,[["memoryconfig",3]]],["res",3,[["memoryusage",3]]]]],[[["res",3],["res",3,[["memoryconfig",3]]],["res",3,[["memoryusage",3]]]]]],"p":[[8,"DataSizeEstimator"],[8,"DataSize"],[3,"MemoryConfig"],[3,"MemoryStats"],[8,"RegisterSizedTypes"],[8,"RegisterTypesWithEstimator"],[8,"RegisterTypes"],[3,"DefaultMemoryUsagePlugins"],[3,"RenderMemoryUsagePlugin"],[3,"ImageMemoryUsagePlugin"],[3,"MaterialMemoryUsagePlugin"],[3,"MeshMemoryUsagePlugin"],[3,"TransformMemoryUsagePlugin"],[3,"ForwardingEstimator"],[3,"ZeroEstimator"],[3,"SliceEstimator"],[8,"FromConfig"],[3,"MemoryUsagePlugin"],[3,"MemoryUsage"]]},\
"datasize":{"doc":"Heap data estimator.","t":[8,24,18,18,5,10,5,14],"n":["DataSize","DataSize","IS_DYNAMIC","STATIC_HEAP_SIZE","data_size","estimate_heap_size","min","non_dynamic_const_heap_size"],"q":["datasize","","","","","","",""],"d":["Indicates that a type knows how to approximate its memory …","Automatically derive the <code>DataSize</code> trait for a type.","If <code>true</code>, the type has a heap size that can vary at …","The amount of space a value of the type <em>always</em> occupies. …","Estimates allocated heap data from data of value.","Estimates the size of heap memory taken up by this value.","A <code>const fn</code> variant of the <code>min</code> function.","Helper macro to define a heap size for one or more …"],"i":[0,0,1,1,0,1,0,0],"f":[null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],null],"p":[[8,"DataSize"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};